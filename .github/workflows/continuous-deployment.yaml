name: Testing and distribution
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint-python:
    name: Lint Python code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check with Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: 'check --exit-zero --verbose'

      - name: Format with Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: 'format --check --verbose'

  test-python:
    name: "Test Python"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11', '3.12', '3.13']
        django: ['4.2', '5.1', '5.2']
        psycopg: ['psycopg2', 'psycopg']
        exclude:
        - python: '3.9'
          django: '5.1'
        - python: '3.9'
          django: '5.2'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip
        run: |
          python -m ensurepip --upgrade
          pip install setuptools wheel --upgrade

      - name: Install Python dependencies
        run: pip install ${{ matrix.psycopg }} django==${{ matrix.django }} mock pytest-django

      - name: Test
        run: pytest tests
        env:
          PGPASSWORD: postgres

  test-build:
    name: Build Python package
    runs-on: ubuntu-latest
    needs: [test-python,lint-python]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: install-uv
        name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - id: install-python
        name: Install Python
        run: uv python install 3.13

      - id: build
        name: Build releases
        run: uv build --sdist --wheel
        shell: bash

      - id: save
        name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate
          path: ./dist
          if-no-files-found: error

  tag-release:
    name: Tagged PyPI release
    runs-on: ubuntu-latest
    needs: [test-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Fetch artifact
        uses: actions/download-artifact@v4
        with:
          name: release-candidate
          path: ./dist

      - name: Publish release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
