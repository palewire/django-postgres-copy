name: Testing and distribution
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint-python:
    name: "Lint Python"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pipenv'

      - id: install-pipenv
        name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
        shell: bash

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv sync --dev

      - name: Lint
        run: pipenv run flake8 postgres_copy

  test-python:
    name: "Test Python"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11', '3.12']
        django: ['4.2', '5.1', '5.2']
        exclude:
        - python: '3.9'
          django: '5.1'
        - python: '3.9'
          django: '5.2'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: Install Python dependencies
        run: pip install flake8 psycopg2 django==${{ matrix.django }} mock --python=${{ matrix.python }} --skip-lock

      - name: Test
        run: python setup.py test
        env:
          PGPASSWORD: postgres

  test-build:
    name: Build Python package
    runs-on: ubuntu-latest
    needs: [test-python,lint-python]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pipenv'

      - id: install-pipenv
        name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
        shell: bash

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv sync --dev

      - id: build
        name: Build release
        run: |
            pipenv run python setup.py sdist
            pipenv run python setup.py bdist_wheel
            ls -l dist

      - id: check
        name: Check release
        run: pipenv run twine check dist/*

      - id: save
        name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate
          path: ./dist
          if-no-files-found: error

  tag-release:
    name: Tagged PyPI release
    runs-on: ubuntu-latest
    needs: [test-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - id: fetch
        name: Fetch artifact
        uses: actions/download-artifact@v4
        with:
          name: release-candidate
          path: ./dist

      - id: publish
        name: Publish release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
